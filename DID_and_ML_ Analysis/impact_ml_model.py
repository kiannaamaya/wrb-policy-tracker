# -*- coding: utf-8 -*-
"""Impact ML Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l7VtS_dREsBd8LN88J1Jc1bPbbl5XCWL
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

data_from_2001 = pd.read_csv('data_from_2001.csv')
data_up_to_2000 = pd.read_csv('data_up_to_2000.csv')
did_results = pd.read_csv('did_results.csv')

data_from_2001_cleaned = data_from_2001.dropna(subset=['policy_id'])
data_up_to_2000_cleaned = data_up_to_2000.dropna(subset=['policy_id'])

data_up_to_2000_merged = pd.merge(data_up_to_2000_cleaned, did_results, on='policy_id', how='inner')

columns_to_keep = ['policy_id', 'location', 'year',
                   #'full_policy',
                   'expand', 'restrict', 'neutral', 'DiD_rate_for_women', 'DiD_num_providers']
data_up_to_2000_merged = data_up_to_2000_merged[columns_to_keep]

columns_to_keep = ['policy_id', 'location', 'year',
                   #'full_policy',
                   'expand', 'restrict', 'neutral']
data_from_2001_cleaned = data_from_2001_cleaned[columns_to_keep]

"""## Data Preprocessing"""

# Example of detecting outliers using the IQR method
Q1 = data_up_to_2000_merged['DiD_rate_for_women'].quantile(0.25)
Q3 = data_up_to_2000_merged['DiD_rate_for_women'].quantile(0.75)
IQR = Q3 - Q1

# Define bounds for the outliers
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Filtering the DataFrame to remove outliers
data_up_to_2000_filtered = data_up_to_2000_merged[(data_up_to_2000_merged['DiD_rate_for_women'] >= lower_bound) & (data_up_to_2000_merged['DiD_rate_for_women'] <= upper_bound)]

# Example of detecting outliers using the IQR method
Q1 = data_up_to_2000_merged['DiD_num_providers'].quantile(0.25)
Q3 = data_up_to_2000_merged['DiD_num_providers'].quantile(0.75)
IQR = Q3 - Q1

# Define bounds for the outliers
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Filtering the DataFrame to remove outliers
data_up_to_2000_filtered = data_up_to_2000_merged[(data_up_to_2000_merged['DiD_num_providers'] >= lower_bound) & (data_up_to_2000_merged['DiD_num_providers'] <= upper_bound)]

data_up_to_2000_filtered

"""## Training

### Abortion Rates
"""

X = data_up_to_2000_merged[['expand', 'restrict', 'neutral']]  # features
y = data_up_to_2000_merged['DiD_rate_for_women']  # target

"""#### Linear Regression"""

model = LinearRegression()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model.fit(X_train, y_train)

mae = mean_absolute_error(y_test, model.predict(X_test))
mse = mean_squared_error(y_test, model.predict(X_test))
rmse = np.sqrt(mse)
r2 = r2_score(y_test, model.predict(X_test))

print(f"MAE: {mae}")
print(f"MSE: {mse}")
print(f"RMSE: {rmse}")
print(f"R-squared: {r2}")

"""#### Ridge Model"""

from sklearn.linear_model import Ridge

ridge_model = Ridge(alpha=1.0)
ridge_model.fit(X_train, y_train)

mae = mean_absolute_error(y_test, ridge_model.predict(X_test))
mse = mean_squared_error(y_test, ridge_model.predict(X_test))
rmse = np.sqrt(mse)
r2 = r2_score(y_test, ridge_model.predict(X_test))

print(f"MAE: {mae}")
print(f"MSE: {mse}")
print(f"RMSE: {rmse}")
print(f"R-squared: {r2}")

from sklearn.model_selection import cross_val_score

# Example for 5-fold cross-validation
scores = cross_val_score(ridge_model, X, y, cv=5, scoring='neg_mean_squared_error')
print(f"Average cross-validated MSE: {np.mean(np.abs(scores))}")

"""#### Random Forest Model"""

from sklearn.ensemble import RandomForestRegressor

rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

mae = mean_absolute_error(y_test, rf_model.predict(X_test))
mse = mean_squared_error(y_test, rf_model.predict(X_test))
rmse = np.sqrt(mse)
r2 = r2_score(y_test, rf_model.predict(X_test))

print(f"MAE: {mae}")
print(f"MSE: {mse}")
print(f"RMSE: {rmse}")
print(f"R-squared: {r2}")

"""#### Final Model
Choosing Ridge model.
"""

X_new = data_from_2001_cleaned[['expand', 'restrict', 'neutral']]

predictions = ridge_model.predict(X_new)

data_from_2001_cleaned['predicted_DiD_rate_for_women'] = predictions

data_from_2001_cleaned

"""### Number of Providers"""

X = data_up_to_2000_merged[['expand', 'restrict', 'neutral']]  # features
y = data_up_to_2000_merged['DiD_num_providers']  # target

"""#### Linear Regression"""

model = LinearRegression()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model.fit(X_train, y_train)

mae = mean_absolute_error(y_test, model.predict(X_test))
mse = mean_squared_error(y_test, model.predict(X_test))
rmse = np.sqrt(mse)
r2 = r2_score(y_test, model.predict(X_test))

print(f"MAE: {mae}")
print(f"MSE: {mse}")
print(f"RMSE: {rmse}")
print(f"R-squared: {r2}")

"""#### Ridge Model"""

from sklearn.linear_model import Ridge

ridge_model = Ridge(alpha=1.0)
ridge_model.fit(X_train, y_train)

mae = mean_absolute_error(y_test, ridge_model.predict(X_test))
mse = mean_squared_error(y_test, ridge_model.predict(X_test))
rmse = np.sqrt(mse)
r2 = r2_score(y_test, ridge_model.predict(X_test))

print(f"MAE: {mae}")
print(f"MSE: {mse}")
print(f"RMSE: {rmse}")
print(f"R-squared: {r2}")

from sklearn.model_selection import cross_val_score

# Example for 5-fold cross-validation
scores = cross_val_score(ridge_model, X, y, cv=5, scoring='neg_mean_squared_error')
print(f"Average cross-validated MSE: {np.mean(np.abs(scores))}")

"""#### Random Forest Model"""

from sklearn.ensemble import RandomForestRegressor

rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

mae = mean_absolute_error(y_test, rf_model.predict(X_test))
mse = mean_squared_error(y_test, rf_model.predict(X_test))
rmse = np.sqrt(mse)
r2 = r2_score(y_test, rf_model.predict(X_test))

print(f"MAE: {mae}")
print(f"MSE: {mse}")
print(f"RMSE: {rmse}")
print(f"R-squared: {r2}")

"""#### Final Model"""

X_new = data_from_2001_cleaned[['expand', 'restrict', 'neutral']]

predictions = ridge_model.predict(X_new)

data_from_2001_cleaned['predicted_DiD_num_provideres'] = predictions

data_from_2001_cleaned.to_csv('predictions_output.csv')

combined_data = pd.read_csv('/content/combined_data.csv')
combined_data